// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
	using Eco.Gameplay.Components.Storage;
    using static Eco.Gameplay.Housing.PropertyValues.HomeFurnishingValue;
    using Eco.Gameplay.Items.Recipes;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(HousingComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [RequireComponent(typeof(RoomRequirementsComponent))]
    [RequireRoomContainment]
    [RequireRoomVolume(2)]
    [Tag("Usable")]
    [Ecopedia("Housing Objects", "Cultural", subPageName: "Iron Frame Large Tall Item")]
            public partial class IronFrameLargeTallObject : PictureFrameObject, IRepresentsItem
    {
        public virtual Type RepresentedItemType => typeof(IronFrameLargeTallItem);
        public override LocString DisplayName => Localizer.DoStr("Iron Frame Large Tall");
        public override TableTextureMode TableTexture => TableTextureMode.Metal;

        static IronFrameLargeTallObject()
        {
            WorldObject.AddOccupancy<IronFrameLargeTallObject>(new List
                <BlockOccupancy>(){
                    new BlockOccupancy(new Vector3i( 0, 0, 0)),
                    new BlockOccupancy(new Vector3i( 0, 1, 0)),
                    new BlockOccupancy(new Vector3i( 0, 2, 0)),
                    new BlockOccupancy(new Vector3i( 1, 0, 0)),
                    new BlockOccupancy(new Vector3i( 1, 1, 0)),
                    new BlockOccupancy(new Vector3i( 1, 2, 0)),
                });
        }

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            base.Initialize();

            this.GetComponent<HousingComponent>().HomeValue = IronFrameLargeTallItem.homeValue;
            this.ModsPostInitialize();
        }

        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Iron Frame Large Tall")]
    [LocDescription("A large iron frame useful for simple picture and art displays.")]
    [Ecopedia("Housing Objects", "Cultural", createAsSubPage: true)]
    [Tag("Housing")]
    [Weight(1000)] // Defines how heavy IronFrameLargeTall is.
            public partial class IronFrameLargeTallItem : WorldObjectItem<IronFrameLargeTallObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext( 0  | DirectionAxisFlags.Backward , WorldObject.GetOccupancyInfo(this.WorldObjectType));
        public override HomeFurnishingValue HomeValue => homeValue;
        public static readonly HomeFurnishingValue homeValue = new HomeFurnishingValue()
        {
            ObjectName                              = typeof(IronFrameLargeTallObject).UILink(),
            Category                                = HousingConfig.GetRoomCategory("Cultural"),
            BaseValue                               = 0,
            TypeForRoomLimit                        = Localizer.DoStr("Cultural"),
            DiminishingMultiplierAcrossFullProperty = 0.5f

        };

        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }

    /// <summary>
    /// <para>Server side recipe definition for "IronFrameLargeTall".</para>
    /// <para>More information about RecipeFamily objects can be found at https://docs.play.eco/api/server/eco.gameplay/Eco.Gameplay.Items.RecipeFamily.html</para>
    /// </summary>
    /// <remarks>
    /// This is an auto-generated class. Don't modify it! All your changes will be wiped with next update! Use Mods* partial methods instead for customization.
    /// If you wish to modify this class, please create a new partial class or follow the instructions in the "UserCode" folder to override the entire file.
    /// </remarks>
    [RequiresModule(typeof(BlacksmithTableObject))]
    [RequiresSkill(typeof(BlacksmithSkill), 4)]
    [ForceCreateView]
    [Ecopedia("Housing Objects", "Cultural", subPageName: "Iron Frame Large Tall Item")]
    public partial class IronFrameLargeTallRecipe : Recipe
    {
        public IronFrameLargeTallRecipe()
        {
            this.Init(
                name: "IronFrameLargeTall",  //noloc
                displayName: Localizer.DoStr("Iron Frame Large Tall"),

                // Defines the ingredients needed to craft this recipe. An ingredient items takes the following inputs
                // type of the item, the amount of the item, the skill required, and the talent used.
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(IronBarItem), 4, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                },

                // Define our recipe output items.
                // For every output item there needs to be one CraftingElement entry with the type of the final item and the amount
                // to create.
                items: new List<CraftingElement>
                {
                    new CraftingElement<IronFrameLargeTallItem>()
                });
            // Perform post initialization steps for user mods and initialize our recipe instance as a tag product with the crafting system
            this.ModsPostInitialize();
            CraftingComponent.AddTagProduct(typeof(AnvilObject), typeof(IronFrameWideRecipe), this);
        }


        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }
}
